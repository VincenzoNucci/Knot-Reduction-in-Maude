fmod GAUSS-CODE is

   protecting INT .
   sorts NeGauss Gauss .

   subsorts Int < NeGauss < Gauss .

   op ~ : -> Gauss [ctor] .

   op _;_ : Int Int -> NeGauss [assoc id: ~ ctor] .
   op _;_ : Int Gauss -> NeGauss [ditto] .
   op _;_ : Gauss Int -> NeGauss [ditto] .
   op _;_ : Gauss Gauss -> Gauss [ditto] .

   op _;_ : Int NeGauss -> NeGauss [ditto] .
   op _;_ : NeGauss Int -> NeGauss [ditto] .
   op _;_ : NeGauss NeGauss -> NeGauss [ditto] .

   op _;_ : NeGauss Gauss -> NeGauss [ditto] .
   op _;_ : Gauss NeGauss -> NeGauss [ditto] .


   op remove_from_ : Int NeGauss -> Gauss .
   op length : Gauss -> Int .
   op positionOf_in_ : Int Gauss -> Int .
   --- op add_in_to_ : Int Int Gauss -> NeGauss .
   op add_in_to_ : Gauss Int Gauss -> NeGauss .
   op move_to_in_ : Int Int NeGauss -> NeGauss .
   op next : Gauss -> Gauss .
   op maxKnot : Gauss -> Int .

   vars G G' G'' : Gauss .
   var NeG : NeGauss .
   vars I K : Int .

   --- REMOVE OPERATION
   eq remove I from NeG ; I = NeG .
   eq remove I from I ; NeG = NeG .
   eq remove I from G ; (I ; G') = G ; G' .

   --- LENGTH OPERATION
   eq length(~) = 0 .
   eq length(I) = 1 .
   eq length(I ; G) = 1 + length(G) .

   --- POSITION OPERATION
   --- I is found
   eq positionOf I in I = 0 .
   eq positionOf I in I ; G = 0 .
   eq positionOf I in G ; I = length(G) .
   eq positionOf I in G ; (I ; G') = length(G) .
   --- I is not found
   eq positionOf I in ~ = -1 .
   ceq positionOf I in K = -1 if I =/= K .
   ceq positionOf I in K ; G = -1 if I =/= K .
   ceq positionOf I in G ; K = -1 if I =/= K .
   ceq positionOf I in G ; (K ; G') = -1 if I =/= K .

   --- ADD OPERATOR
   eq add I in K to ~ = I .
   ceq add I in K to G = G ; I if K = length(G) .
   eq add I in 0 to G = I ; G .
   ceq add I in K to G ; G' = G ; (I ; G') if K = length(G) .

   ceq add G in K to G' ; G'' = G' ; (G ; G'') if K = length(G') . 

   --- MOVE OPERATION
   eq move I to K in NeG = ( add I in K to ( remove I from NeG ) ) .

   --- MAXKNOT OPERATION
   --- prendere l'intero successivo alla coppia di crossing più alta e restituire il successivo
   eq maxKnot(~) = 0 .
   eq maxKnot(I) = I .
   ceq maxKnot(G ; I) = if I > max(G) then I else max(G) fi .

   --- NEXT OPERATION
   eq next(G) = ((maxKnot(G) + 1) ; - (maxKnot(G) + 1)) .

endfm


--- Work In Progress

fmod KNOT-DEFINITION is

   protecting GAUSS-CODE .

   
   sort NegInt .

   subsort NegInt < Int .

   vars I K : Int .
   var Z : NegInt .
   var NeG : NeGauss .
   var G G' : Gauss .

   op _eqn_ : Int NegInt -> Bool .
   op _negIn_ : Int NeGauss -> Bool .
   op _adj_in_ : Int Int NeGauss -> Bool .

   eq - I + I = 0 .
   ceq I eqn Z = true if abs(I) = abs(Z) /\ I + Z = 0 . 
    
   ---ADJACENT OPERATION
   eq I adj K in (G ; I ; K ; G') = true .
   eq I adj K in (G ; K ; I ; G') = true .
   eq I adj K in (I ; G ; G' ; K) = true .
   eq I adj K in (K ; G ; G' ; I) = true .
   eq I adj K in NeG = false [owise] .  

   ---ceq I negIn NeG = true if I adj K in NeG = true /\ - I + I = 0 . 
endfm

mod R-MOVES is
   
   protecting KNOT-DEFINITION .
   protecting BOOL .

   op canApplyMove1 : Gauss -> Bool .
   op canApplyMove2 : Gauss -> Bool .
   op canApplyMove3 : Gauss -> Bool .

   op applyMove3I : Gauss -> Int .
   op applyMove3J : Gauss -> Int .
   op applyMove3K : Gauss -> Int .
   op applyMove3Z : Gauss -> Int .

   op sign : Int -> Int .

   vars G G' G'' : Gauss .
   var NeG : NeGauss .
   vars I K K' J J' Z Z' X X' : Int .

   ceq sign(I) = 1 if I > 0 .
   ceq sign(I) = -1 if I < 0 .

   
   ceq canApplyMove1( I ; K ) = true if abs(I) = abs(K) /\ I + K = 0 .
   ---ceq canApplyMove1(I ; G ; G' ; K) = true if I adj K in (I ; G ; G' ; K) = true /\ abs(I) = abs(K) /\ I + K = 0 /\ positionOf K in (I ; G ; G' ; K) = length(I ; G ; G' ; K) /\ positionOf I in (I ; G ; G' ; K) = 0 .
   eq canApplyMove1(~) = false .
   eq canApplyMove1(G) = false [owise] .

   ceq canApplyMove2(I ; K ; G' ; J ; Z ) = true if sign(I) = sign(K) /\ sign(J) = sign(Z) /\ I + Z = 0 /\ K + J = 0 .
   eq canApplyMove2(~) = false .
   eq canApplyMove2(I ; K ; G' ; J ; Z ) = false [owise] .

   ---ceq canApplyMove3( I ; J ; G ; K ; Z ) = true if sign(I) = sign(Z) /\ J + K = 0 . 
   eq canApplyMove3(G ; I ; K ; G' ; - I ; - J ; - K ; J ; G'') = true .
   eq canApplyMove3(G ; I ; K ; G' ; - J ; - I ; - K ; J ; G'') = true .
   eq canApplyMove3(~) = false .
   eq canApplyMove3(I ; J ; G' ; K ; Z ) = false [owise] .

   ceq applyMove3I(G ; I ; J ; G' ; K ; Z ; G'') = I if canApplyMove3(G ; I ; J ; G' ; K ; Z ; G'') .
   ceq applyMove3J(G ; I ; J ; G' ; K ; Z ; G'') = J if canApplyMove3(G ; I ; J ; G' ; K ; Z ; G'') .
   ceq applyMove3K(G ; I ; J ; G' ; K ; Z ; G'') = K if canApplyMove3(G ; I ; J ; G' ; K ; Z ; G'') .
   ceq applyMove3Z(G ; I ; J ; G' ; K ; Z ; G'') = Z if canApplyMove3(G ; I ; J ; G' ; K ; Z ; G'') .

   


   ---fare in modo che la move3 la applica solo se non può applicare la move1 o move2

   crl [move1] : (G ; I ; K ) => (G ) if canApplyMove1(G ; I ; K ) = true .
   crl [move1] : (I ; K ; G) => (G) if canApplyMove1(I ; K ; G) = true .
   crl [move1] : (I ; G ; K) => (G ) if canApplyMove1(I ; G ; K) = true .

---creare la operazione next che dato un gauss code G restituisce la coppia di interi I -I successivi alla coppia piu grande presente in G
   --- (G ; G') => (G ; new(G ; G'); G')

   --- crl [move1Inv] : (G ; G') => (add (I ; - I) in X to G) if positionOf I in G = -1 /\ positionOf - I in G = -1 /\ .
   rl [move1Inv] : (G ; G') => (G ; next(G ; G') ; G') .
   
   --- crl [move2Inv] : (G ; K ; G' ; Z ; G'') => (add (K + 1 ; Z + 1) in X' to (add (- K ; - Z) in X to G)) if abs(X' - X) >= 2 /\ positionOf K in G = -1 /\ positionOf Z in G = -1 /\ positionOf - K in G = -1 /\ positionOf - Z in G = -1 /\ K =/= Z /\ sign(K) = sign(Z) .
   rl [move2Inv] : (G ; G') => (G ; next(G ; G') ; next(next(G ; G')) ; G') .
   crl [move2] : (I ; K ; G' ; J ; Z) => (G') if canApplyMove2(I ; K ; G' ; J ; Z) = true .
   crl [move3] : (G ; I ; K ; G' ; - I ; - J ; - K ; J ; G'') => (G ; K ; J ; G' ; - I ; - J ; I ; - K ; G'' ) if canApplyMove3(G ; I ; K ; G' ; - I ; - J ; - K ; J ; G'') = true .
   crl [move3] : (G ; I ; K ; G' ; - J ; - I ; - K ; J ; G'') => (G ; K ; J ; G' ; - J ; - I ; I ; - K ; G'' ) if canApplyMove3(G ; I ; K ; G' ; - I ; - J ; - K ; J ; G'') = true .
   crl [unknot] : G => ~ if canApplyMove1(G) = false /\ canApplyMove2(G) = false /\ canApplyMove3(G) = false /\ length(G) = 0 .
   crl [minknot] : G => G if canApplyMove1(G) = false /\ canApplyMove2(G) = false /\ canApplyMove3(G) = false /\ length(G) =/= 0 .

endm


